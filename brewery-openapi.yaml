openapi: 3.0.1
info:
  title: BeerHub
  description: A nice web API for beer
  version: v1
servers:
  - url: http://127.0.0.1:8000/api/v1
security:
  - Basic: []
paths:
  /auth/login/:
    post:
      tags:
        - auth
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      operationId: auth_login_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Login'
      x-codegen-request-body-name: data
  /auth/logout/:
    get:
      tags:
        - auth
      summary: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.
      description: Accepts/Returns nothing.
      operationId: auth_logout_list
      responses:
        "200":
          description: ""
          content: {}
    post:
      tags:
        - auth
      summary: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.
      description: Accepts/Returns nothing.
      operationId: auth_logout_create
      responses:
        "201":
          description: ""
          content: {}
  /auth/password/change/:
    post:
      tags:
        - auth
      summary: Calls Django Auth SetPasswordForm save method.
      description: |-
        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      operationId: auth_password_change_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordChange'
      x-codegen-request-body-name: data
  /auth/password/reset/:
    post:
      tags:
        - auth
      summary: Calls Django Auth PasswordResetForm save method.
      description: |-
        Accepts the following POST parameters: email
        Returns the success/fail message.
      operationId: auth_password_reset_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordReset'
      x-codegen-request-body-name: data
  /auth/password/reset/confirm/:
    post:
      tags:
        - auth
      summary: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.
      description: |-
        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      operationId: auth_password_reset_confirm_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PasswordResetConfirm'
      x-codegen-request-body-name: data
  /auth/registration/:
    post:
      tags:
        - auth
      summary: Registers a new user.
      description: "Accepts the following POST parameters: username, email, password1,\
        \ password2."
      operationId: auth_registration_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Register'
      x-codegen-request-body-name: data
  /auth/registration/resend-email/:
    post:
      tags:
        - auth
      summary: Resends another email to an unverified email.
      description: "Accepts the following POST parameter: email."
      operationId: auth_registration_resend-email_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResendEmailVerification'
      x-codegen-request-body-name: data
  /auth/registration/verify-email/:
    post:
      tags:
        - auth
      summary: Verifies the email associated with the provided key.
      description: "Accepts the following POST parameter: key."
      operationId: auth_registration_verify-email_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VerifyEmail'
      x-codegen-request-body-name: data
  /auth/user/:
    get:
      tags:
        - auth
      summary: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.
      description: |-
        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      operationId: auth_user_read
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
    put:
      tags:
        - auth
      summary: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.
      description: |-
        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      operationId: auth_user_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
      x-codegen-request-body-name: data
    patch:
      tags:
        - auth
      summary: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.
      description: |-
        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      operationId: auth_user_partial_update
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
      x-codegen-request-body-name: data
  /beers/:
    get:
      tags:
        - beers
      operationId: beers_list
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beer'
    post:
      tags:
        - beers
      operationId: beers_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
  /beers/by-brewery/:
    get:
      tags:
        - beers
      operationId: beers_by-brewery_list
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beer'
    post:
      tags:
        - beers
      operationId: beers_by-brewery_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
  /beers/by-brewery/{id}/:
    get:
      tags:
        - beers
      operationId: beers_by-brewery_read
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
    put:
      tags:
        - beers
      operationId: beers_by-brewery_update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
    delete:
      tags:
        - beers
      operationId: beers_by-brewery_delete
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "204":
          description: ""
          content: {}
    patch:
      tags:
        - beers
      operationId: beers_by-brewery_partial_update
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
  /beers/editor/:
    get:
      tags:
        - beers
      operationId: beers_editor_list
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Beer'
    post:
      tags:
        - beers
      operationId: beers_editor_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "201":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
  /beers/editor/{id}/:
    get:
      tags:
        - beers
      operationId: beers_editor_read
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
    put:
      tags:
        - beers
      operationId: beers_editor_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
    delete:
      tags:
        - beers
      operationId: beers_editor_delete
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: ""
          content: {}
    patch:
      tags:
        - beers
      operationId: beers_editor_partial_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
  /beers/{id}/:
    get:
      tags:
        - beers
      operationId: beers_read
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
    put:
      tags:
        - beers
      operationId: beers_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
    delete:
      tags:
        - beers
      operationId: beers_delete
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      responses:
        "204":
          description: ""
          content: {}
    patch:
      tags:
        - beers
      operationId: beers_partial_update
      parameters:
        - name: id
          in: path
          description: A unique integer value identifying this beer.
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beer'
        required: true
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Beer'
      x-codegen-request-body-name: data
components:
  schemas:
    Login:
      required:
        - password
      type: object
      properties:
        username:
          title: Username
          type: string
        email:
          title: Email
          type: string
          format: email
        password:
          title: Password
          minLength: 1
          type: string
    PasswordChange:
      required:
        - new_password1
        - new_password2
      type: object
      properties:
        new_password1:
          title: New password1
          maxLength: 128
          minLength: 1
          type: string
        new_password2:
          title: New password2
          maxLength: 128
          minLength: 1
          type: string
    PasswordReset:
      required:
        - email
      type: object
      properties:
        email:
          title: Email
          minLength: 1
          type: string
          format: email
    PasswordResetConfirm:
      required:
        - new_password1
        - new_password2
        - token
        - uid
      type: object
      properties:
        new_password1:
          title: New password1
          maxLength: 128
          minLength: 1
          type: string
        new_password2:
          title: New password2
          maxLength: 128
          minLength: 1
          type: string
        uid:
          title: Uid
          minLength: 1
          type: string
        token:
          title: Token
          minLength: 1
          type: string
    Register:
      required:
        - email
        - password1
        - password2
        - username
      type: object
      properties:
        username:
          title: Username
          maxLength: 150
          minLength: 1
          type: string
        email:
          title: Email
          minLength: 1
          type: string
          format: email
        password1:
          title: Password1
          minLength: 1
          type: string
        password2:
          title: Password2
          minLength: 1
          type: string
    ResendEmailVerification:
      required:
        - email
      type: object
      properties:
        email:
          title: Email
          minLength: 1
          type: string
          format: email
    VerifyEmail:
      required:
        - key
      type: object
      properties:
        key:
          title: Key
          minLength: 1
          type: string
    UserDetails:
      required:
        - username
      type: object
      properties:
        pk:
          title: ID
          type: integer
          readOnly: true
        username:
          title: Benutzername
          maxLength: 150
          minLength: 1
          pattern: "^[\\w.@+-]+$"
          type: string
          description: "Erforderlich. 150 Zeichen oder weniger. Nur Buchstaben, Ziffern\
            \ und @/./+/-/_."
        email:
          title: E-Mail-Adresse
          minLength: 1
          type: string
          format: email
          readOnly: true
        first_name:
          title: Vorname
          maxLength: 150
          type: string
        last_name:
          title: Nachname
          maxLength: 150
          type: string
    Beer:
      required:
        - brewery
        - description
        - name
      type: object
      properties:
        id:
          title: ID
          type: integer
          readOnly: true
        name:
          title: Name
          maxLength: 100
          minLength: 1
          type: string
          description: The name of the beer (capitalized)
        description:
          title: Description
          minLength: 1
          type: string
          description: A description of the beer
        brewery:
          title: Brewery
          maxLength: 100
          minLength: 1
          type: string
          description: Name of the brewery
        created_at:
          title: Created at
          type: string
          format: date-time
          readOnly: true
        updated_at:
          title: Updated at
          type: string
          format: date-time
          readOnly: true
  securitySchemes:
    Basic:
      type: http
      scheme: basic
x-original-swagger-version: "2.0"
